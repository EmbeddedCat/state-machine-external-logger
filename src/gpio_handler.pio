
.program gpio_handler       ; The name of the program.

.define GPIO_NUMBER 16

init:
    mov x, null             ; inititialize x
    mov y, null             ; inititialize y
    in null, 32             ; inititialize the shift input register.

__start:
    in pins, GPIO_NUMBER    ; Read the GPIO_NUMBER gpio pins.
    mov x, ISR              ; Move the data of input shift register to x.
    jmp x!=y push_to_rx     ; If the 11 gpios changed push them to RX queue.
    in null, 32             ; Clear the data from input shift register.
    jmp __start             ; If the 11 gpios haven't changed yet, read the gpios again.

push_to_rx:
    mov y, x                ; Move the latest values of gpios to y.
    push                    ; Push the latest values of gpios to the RX queue.
    in null, 32             ; Clear the data from input shift register.
    jmp __start


% c-sdk {
#ifndef GPIO_NUMBER
#define GPIO_NUMBER 16
#endif

void gpio_handler_program_init(PIO pio, uint sm, uint offset, uint pin) 
{
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, GPIO_NUMBER, false);
    pio_sm_config conf = gpio_handler_program_get_default_config(offset);
    sm_config_set_set_pins(&conf, pin, GPIO_NUMBER);
    pio_sm_init(pio, sm, offset, &conf);
}
%}
