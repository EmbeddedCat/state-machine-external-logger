
.program gpio_handler ; The name of the program.

init:
    mov x, null             ; inititialize x
    mov y, null             ; inititialize y
    in null, 31             ; inititialize the shift input register.

__start:
    in pins, 11             ; Read the 11 gpio pins.
    mov x, ISR              ; Move the data of input shift register to x.
    in null, 31             ; Clear the data from input shift register.
    jmp x!=y push_to_rx     ; If the 11 gpios change changed push them to RX queue.
    jmp __start             ; If the 11 gpios haven't changed yet, read the gpios again --- 4 cyrcles = 5 * 8 = 40 nanoseconds.

push_to_rx:
    mov y, x                ; Move the latest values of gpios to y.
    push                    ; Push the latest values of gpios to the RX queue.

; All the above instructions takes 5 cyrcles, whitch is equal to 5 * 8 = 48 nanoseconds.

% c-sdk {
    void gpio_handler_program_init(PIO pio, uint sm, uint offset, uint pin) 
    {
        pio_gpio_init(pio, pin);
        pio_sm_set_consecutive_pindirs(pio, sm, pin, 11, false);
        pio_sm_config conf = gpio_handler_program_get_default_config(offset);
        pio_sm_init(pio, sm, offset, &conf);
    }
%}
